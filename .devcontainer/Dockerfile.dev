# syntax=docker/dockerfile:1

# Base stage
FROM debian:bookworm-slim as base
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/root/.local/bin:$PATH"

RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    git \
    gnupg \
    unzip \
    vim \
    zsh \
    zsh-autosuggestions \
    zsh-syntax-highlighting \
    dos2unix \
    bash-completion \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Python stage
FROM base as python
ENV PYTHON_VERSION=3.11
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1

RUN apt-get update && apt-get install -y --no-install-recommends \
    python${PYTHON_VERSION} \
    python${PYTHON_VERSION}-venv \
    python3-pip \
    && rm -rf /var/lib/apt/lists/* \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 1 \
    && update-alternatives --install /usr/bin/python python /usr/bin/python${PYTHON_VERSION} 1 \
    && python3 -m venv /root/.venv

# Chrome stage
FROM base as chrome
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    xvfb \
    libxi6 \
    libgconf-2-4 \
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Node.js stage
FROM base as node
ENV NVM_DIR=/root/.nvm
ENV NVM_VERSION=v0.39.7
ENV NODE_VERSION=22.12.0
ENV NPM_VERSION=11.0.0

RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash \
    && . $NVM_DIR/nvm.sh \
    && nvm install ${NODE_VERSION} \
    && nvm alias default ${NODE_VERSION} \
    && nvm use default \
    && npm install -g npm@${NPM_VERSION}

# AWS stage
FROM python as aws
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install && \
    rm -rf awscliv2.zip aws

# AWS EB CLI のインストール
RUN . /root/.venv/bin/activate && \
    pip install --no-cache-dir awsebcli && \
    deactivate

# Terraform stage
FROM base as terraform
ENV TERRAFORM_VERSION=1.9.2
ENV TERRAFORM_DOCS_VERSION=0.16.0
ENV TERRAFORMER_VERSION=0.8.24

RUN git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv \
    && ln -s /root/.tfenv/bin/* /usr/local/bin \
    && tfenv install ${TERRAFORM_VERSION} \
    && tfenv use ${TERRAFORM_VERSION}

RUN curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v${TERRAFORM_DOCS_VERSION}/terraform-docs-v${TERRAFORM_DOCS_VERSION}-linux-amd64.tar.gz \
    && tar -xzf terraform-docs.tar.gz \
    && chmod +x terraform-docs \
    && mv terraform-docs /usr/local/bin/ \
    && rm terraform-docs.tar.gz

RUN curl -LO https://github.com/GoogleCloudPlatform/terraformer/releases/download/${TERRAFORMER_VERSION}/terraformer-all-linux-amd64 \
    && chmod +x terraformer-all-linux-amd64 \
    && mv terraformer-all-linux-amd64 /usr/local/bin/terraformer

# Docker tools stage
FROM base as docker
RUN install -m 0755 -d /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc \
    && chmod a+r /etc/apt/keyrings/docker.asc \
    && echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y docker-ce-cli docker-buildx-plugin docker-compose-plugin \
    && ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose \
    && rm -rf /var/lib/apt/lists/*

# Google Cloud SDK stage
FROM base as gcloud
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
    && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - \
    && apt-get update && apt-get install -y google-cloud-sdk \
    && mkdir -p /root/.config/gcloud \
    && rm -rf /var/lib/apt/lists/*

# Development stage
FROM python as development
COPY --from=node / /
COPY --from=aws / /
COPY --from=terraform / /
COPY --from=docker / /
COPY --from=gcloud / /
COPY --from=chrome / /

# Install additional tools
RUN apt-get update && apt-get install -y neofetch \
    && curl -LsSf https://astral.sh/uv/install.sh | sh \
    && rm -rf /var/lib/apt/lists/*

# Setup shell configuration
COPY ./config/.bashrc /root/.bashrc
COPY ./config/.zshrc /root/.zshrc
RUN dos2unix /root/.zshrc /root/.bashrc \
    && chmod 644 /root/.zshrc /root/.bashrc

WORKDIR /workspace
SHELL ["/usr/bin/zsh", "-c"]
